#
# .bashrc - this file runs when any news bash shell is created
#
################################################################################



export cals=(/usr/share/calendar/calendar.computer \
	/usr/share/calendar/calendar.history \
	/usr/share/calendar/calendar.holiday \
	/usr/share/calendar/calendar.usholiday \
	/usr/share/calendar/calendar.music \
	/usr/share/calendar/calendar.judaic \
	/usr/share/calendar/calendar.christian)

if [[ $OPAL_NOOB -eq '1' ]]; then
	echo "Loading Noob Settings"
	source $OPAL_DIR/bash/noob.bash
fi



################################################################################
#
#		ENVIRONMENT VARIABLES
#
################################################################################

EDITOR="vim"
PAGER="less"
GIT_EDITOR=$EDITOR
SVN_EDITOR=$EDITOR
VISUAL=$EDITOR

export EDITOR GIT_EDITOR SVN_EDITOR VISUAL

################################################################################
#
#		ALIASES
#
################################################################################

alias please='sudo'
alias diff='diff -bBs'
alias empty='truncate'
alias ls='ls -F -G'
alias lsdir='ls -l | awk '\''/^d/ {print $9;}'\'''
alias localip='ifconfig en0 | grep "inet " '
alias myip="curl http://ifconfig.me"
alias nl="nl -b a"
alias number="nl -b a"
alias nocomment="grep -Ev '^\s*#'"
alias vi="vim"
alias weather="telnet rainmaker.wunderground.com 3000"

#
#    VIM ALIASES
#

alias bvi='vim -u ~/opal/vimrc_files/bash'
alias civi='vim -u ~/opal/vimrc_files/codeigniter'
alias druvi='vim -u ~/opal/vimrc_files/drupal'
alias ghvi='vim -u ~/opal/vimrc_files/ghmd'
alias jsvi='vim -u ~/opal/vimrc_files/js'
alias lvi='vim -u ~/opal/vimrc_files/laravel'
alias phpvi='vim -u ~/opal/vimrc_files/php'
alias pyvi='vim -u ~/opal/vimrc_files/python'
alias rbvi='vim -u ~/opal/vimrc_files/ruby'
alias svi='vim -u ~/opal/vimrc_files/symfony'
alias wpvi='vim -u ~/opal/vimrc_files/wordpress'
alias zendvi='vim -u ~/opal/vimrc_files/zend'
alias scribe='vim -u ~/opal/vimrc_files/scribe'

################################################################################
#
#		FUNCTIONS
#
################################################################################

#
# punch - Keeps track of your time. Updates the timesheet.txt in your
# datadir(). The options 'in' and 'out' are just for events like meetings or
# leaving for the day. Use the 'note' option when you wanna say what you worked
# on, or even just say how long you took for lunch.
#
# @param String $action Allowed Values: in, out, note, switch.
#        'switch' will clock you OUT of one task AND IN on another
# @param String Optional $message What did your work on? messages with multiple
#        words must be enclosed in quotes.
#
#
# $ punch in
# $ punch in "type a brief message here"
# $ punch out
# $ punch out "type a brief message here"
# $ punch note "type a brief message here"
#
function punch()
{
	DATADIR=$(datadir)
	DATESTAMP=$(date +"%a %Y-%m-%d %H:%M:%S")

	if [[ $1 == "in" ]]; then
		MESG=$DATESTAMP
		MESG="$MESG IN"
		if [[ -n $2 ]]; then
			MESG="$MESG $2"
		fi
		echo $MESG >> $DATADIR/timesheet.txt

	elif [[ $1 == "out" ]]; then
		MESG=$DATESTAMP
		MESG="$MESG OUT"
		if [[ -n $2 ]]; then
			MESG="$MESG $2"
		fi
		echo $MESG >> $DATADIR/timesheet.txt

	elif [[ $1 == "note" ]]; then
		MESG=$DATESTAMP
		MESG="$MESG NOTE"
		if [[ -n $2 ]]; then
			MESG="$MESG $2"
		fi
		echo $MESG >> $DATADIR/timesheet.txt

	elif [[ $1 == "switch" ]]; then
		MESG=$DATESTAMP
		MESG="$MESG OUT"
		echo $MESG >> $DATADIR/timesheet.txt

		MESG=$DATESTAMP
		MESG="$MESG IN"
		if [[ -n $2 ]]; then
			MESG="$MESG $2"
		fi
		echo $MESG >> $DATADIR/timesheet.txt

	else
		echo 'punch in OR punch out OR punch note OR punch switch'
	fi
}



#
# mkcd - make a directory and go into it
#
# @param String $directory
#
function mkcd()
{
	mkdir -p "$@" && cd "$@"
}



#
# cdls - change to a directory and list its content
#
# @param String $directory
#
function cdls()
{
	cd "$1" && ls -F -G
}




#
# lsd - get a recursive list of all directories under 'directory'.
#   defaults to cwd.
#
# @param String $directory the directory for which you want to recursively list
#   the contents.
#
function lsd()
{
	if [[ $1 ]]; then
		dir=$1
	else
		dir="."
	fi

	find $dir -type d
}



#
# say_done - Tell the user when a command is done
#
# @param String Optional $message the message to be read out loud
#
function say_done()
{
	if [[ -n $1 ]]; then
		message=$@
	else
		message="It is Done!"
	fi

	if [[ -n $(which say) ]]; then
		say $message
	else
		echo $message
	fi
}



#
# bak - Create a backup of a file or directory
#
# @param String $path when path is a file, a copy is made with .bak appended to
# it's name. if path is a directory, a compressed tarball will be made of the
# directory
#
function bak()
{
	bakfile="$1.bak"
	filename="$bakfile"
	i=1
	while [ -e $filename ]
	do
		filename="${bakfile}.${i}"
		(( i++ ))
	done

	if [ -d $1 ]; then
		dir=$1
		dir=${dir%/}
		echo $dir
		tarfile="${dir}.tar.gz"
		tar -zcvf $tarfile $dir
	elif [ -f $1 ]; then
		cp $1 $filename
	else
		echo "BAK: unsupported item type - must be file or directory"
	fi
}



#
# extract - "uncompress" a file from a variety of common formats
#
# @param String $filename must be a common compressed file type like ZIP or Tar
#
function extract()
{
	if [ -f $1 ]; then
		case $1 in
		*.tar.bz2)  tar xjf $1 ;;
		*.tar.gz)   tar xzf $1 ;;
		*.bz2)      bunzip2 $1 ;;
		*.rar)      rar x $1 ;;
		*.gz)       gunzip  $1 ;;
		*.tar)      tar xf $1 ;;
		*.tbz2)     tar xjf $1 ;;
		*.tgz)      tar xzf $1 ;;
		*.zip)      unzip $1 ;;
		*.Z)        uncompress $1 ;;
		*.7z)       7z x $1 ;;
		esac
	else
		echo "File not found: '$1'"
	fi
}




#
# parse_git_branch - get the current git branch your on
#
function parse_git_branch()
{
	git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
}



#
# set_prompt - set the style of bash prompt used.
#
# @param String $type Allowed values: brief, full, root, compact, basic or files
#
function set_prompt()
{
	use_color=$2
	has_custom_function=$(which my_set_prompt)

	case "$1" in
	brief)
		PS1="\[\e[1;33m\]\u"    # username
		PS1+="\[\e[1;37m\]@"    # @
		PS1+="\[\e[1;32m\]\h "  # host
		PS1+="\[\e[1;31m\]\W"   # base directory name
		PS1+="\[\e[1;36m\] \$(parse_git_branch)\$ \[\e[0m\]"
		;;


	full)
		# andrewwoods@tardis.local ~/opal
		# Sat Jan 18 22:37:10 [626]$
		PS1="\n"
		PS1+="\[\033[1;35m\]\W\[\e[0m\]\n" # /path/to/dir
		PS1+="\[\033[1;37m\]\u@\h\[\e[0m\]\n" # username@host.domain.com
		PS1+="\[\033[1;36m\]\d \t \$(parse_git_branch)\$\[\e[0m\] "
		;;

	root)
		PS1="\n"
		PS1+="\[\033[1;31m\]\u@\h\[\e[0m\]\n" # username@host
		PS1+="\[\033[1;36m\]\w\[\e[0m\]\n"    # /path/to/dir
		PS1+="\[\033[1;37m\]\D{%b %d %H:%M:%S}\[\e[0m\]"  # Sat Dec 19 16:23:24
		PS1+=" \$ "
		;;

	compact)
		PS1="\n"
		PS1+="\[\033[1;32m\]\u\[\e[0m\]"
		PS1+="@"
		PS1+="\[\033[1;35m\]\h\[\e[0m\]\n"
		PS1+="\[\033[1;36m\]\A \W\$(parse_git_branch)\[\e[0m\] \$ "
		;;

	basic)
		PS1="\$ "
		;;

	files)
		PS1="\n"
		PS1+="\[\033[1;31m\][\w]\[\e[0m\]\n"
		PS1+="\[\033[1;37m\]\u@\h\[\e[0m\] "
		PS1+="\[\033[1;36m\](\$(ls -1 | wc -l | sed 's: ::g') files)\[\e[0m\] "
		PS1+="\$ "
		;;

	*)
		if [ -n has_custom_function ]; then
			# do stuff
			my_set_prompt $1 $2
		else
			echo 'Whoops! brief, full, root, compact, basic, or files'
		fi
		;;
	esac
}



#
# swap - Exchange the contents of two files
#
# @param String $file_one
# @param String $file_two
#
function swap()
{
	temp="temp.tmp"

	mv $1 $temp
	mv $2 $1
	mv $temp $2
}



#
# lskeys - Display a list of your ssh keys.
#
function lskeys()
{
	prompt "my ssh keys"
	ls ~/.ssh/*.pub
}



#
# truncate - remove the contents of a file without destroying the file
#
# @param String $filename - file from which you want to remove the contents
#
function truncate()
{
	cat /dev/null > $1
}



#
# define - lookup the dictionary definition of a word
#
# @param String $word the term you want to define
#
function define()
{
	curl dict://dict.org/d:"$@";
}



#
# sha1 - Create a SHA1 digest of a file
#
# @param String $filename the filename for which you want to know/generate it's sha1
#
function sha1()
{
	if [[ -n $(which openssl) ]]; then
		openssl sha1 $@
	else
		echo "openssl is required, but not installed"
	fi
}



#
# htstatus - lookup the http status code by number to refresh your memory
#
# @param Integer $code the numeric status code. e.g. 200
#
# Examples:
#
# $ htstatus 200
#
# $ htstatus 416
#
function htstatus()
{
	grep -A 1 ^$1 $OPAL_DIR/data/http-status-codes.txt
	echo " "
	echo "see http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html for more information"
}



#
# calc - a floating point calculator
#
# @param String $equation the equation you want to execute
#
function calc()
{
	awk 'BEGIN { OFMT="%f"; print '"$*"'; exit}';
}



#
# country - lookup country code to retrieve the country name
#
# @param String $code the 2-letter or 3-letter country code
#
function country()
{
	awk -F "\t" -f $OPAL_DIR/country_lookup.awk -v country=$1  $OPAL_DIR/data/iso-country-codes.txt
}



#
# tabname - assign a name to the active terminal tab
#
# @param String $name the desired tab name. if more than 1 word, enclose with quotes
#
function tabname()
{
	printf "\e]1;$1\a";
}



#
# winname - assign a name to the window your active terminal window
#
# @param String $name the desired window name. if more than 1 word, enclose with quotes
#
function winname()
{
	printf "\e]2;$1\a";
}



#
# show_dotfiles - turn on/off OS X Finders ability to display hidden files
#
# @param Boolean $view determines if hidden files should be displayed.
#        Allowed values: yes, true, no, false
#
function show_dotfiles()
{
	case "$1" in
	true|yes)
		defaults write com.apple.finder AppleShowAllFiles $1
		killall Finder
		;;
	false|no)
		defaults write com.apple.finder AppleShowAllFiles $1
		killall Finder
		;;

	*) echo "usage: show_dotfiles yes|no|true|false" 1>&2

	esac
}



#
# numseg - Display a NUMbered SEGment of a file
#
# when only the start_line is specified, a range of 10 lines before and after
# that line will be numbered and displayed. when start_line and end_line are
# specified, those lines and all those between will be numbered and displayed
#
# @param String $filename the text file with the content
# @param Integer $start
# @param Integer Optional $end
#
# Examples:
#
# Display lines 90 - 110. Line 100 is the middle line of content
# $ seg error.log 100
#
# Display lines 100 through 140.
# $ seg error.log 100 140
#
#
function numseg()
{
	range=10
	filename=$1

	if [[ -z $3 ]]; then
		start=$( calc $2-$range)
		end=$(calc $2+$range)
	else
		start=$2
		end=$3
	fi

	nl $filename | awk "NR >= $start  && NR <=  $end  "
}



#
# seg - Display a SEGment of a file
#
# when only the start_line is specified, a range of 10 lines before and after
# that line will be displayed. when start_line and end_line are specified, those
# lines and all those between will be displayed
#
# @param String $filename the text file with the content
# @param Integer $start
# @param Integer Optional $end
#
# Examples:
#
# Display lines 90 - 110. Line 100 is the middle line of content
# $ seg error.log 100
#
# Display lines 100 through 140.
# $ seg error.log 100 140
#
function seg()
{
	range=10
	filename=$1

	if [[ -z $3 ]]; then
		start=$( calc $2-$range)
		end=$(calc $2+$range)
	else
		start=$2
		end=$3
	fi

	awk "NR >= $start  && NR <=  $end  " $filename
}


# note - record a note to a file from the command line
#
# @param String Optional $destinationCode
# @param String $note_text
#
# Examples:
# $ note work "type a brief message here. quotes are required (for now)"
# $ note type a brief message here
#
function note()
{
	NOW=$(today iso)
	DATADIR=$(datadir)

	if [[ $1 == "work" ]]
	then
		MESG="$NOW "
		shift
		if [[ -n $2 ]]; then
			MESG="$MESG $@"
		fi
		echo $MESG >> $DATADIR/notes.work.txt

	elif [[ $1 == "dev" ]]
	then
		MESG="$NOW "
		shift
		if [[ -n $2 ]]; then
			MESG="$MESG $@"
		fi
		echo $MESG >> $DATADIR/notes.development.txt

	elif [[ $1 == "home" ]]
	then
		MESG="$NOW "
		shift
		if [[ -n $2 ]]; then
			MESG="$MESG $@"
		fi
		echo $MESG >> $DATADIR/notes.home.txt

	else
		MESG="$NOW $@"
		echo $MESG >> $DATADIR/notes.txt
	fi
}



#
# traceurl - decode/unfurl a short url recursively to it's final destination
#
# @param String $url the address of the website you want to check
#
function traceurl()
{
	if [[ -n $1 ]]
	then
		curl --location --head $1
	else
		echo 'Whoops! You forgot to specify a short URL'
	fi
}



#
# check_site - determine if a website is available yet. keep checking until it is
#
# @param String $url the address of the website you want to check
# @param Integer $interval the number of seconds to wait
#
function check_site()
{
	declare -i i=0

	if [ -z "$2" ]
	then
		# set the default interval, in seconds
		interval=10
	else
		interval=$2
	fi

	while ! curl -m 5 $1 2>/dev/null;
	do
		sleep $interval;
		ans=$(( i % 30 ))
		if [ $ans == 0 ]; then
			ts=$( date )
			echo "Still down at $ts "
		fi
		i=$(( i +  1  ))
		echo -n ".";
	done;

	say_done 'OK! The site is up now!' ;
}



#
# wp_install - download wordpress, install, and configure it.
#
# $ wp_install <dirname>
#
function wp_install
{
	wp core download --path=$1
	cd $1
	read -p 'name the database:' dbname
	wp core config --dbname=$dbname --dbuser=root --dbpass=awoods --dbhost=localhost
	wp db create
	wp core install --prompt
}



#
# wp_plugins
#
# $ wp_plugins ~/wp-plugins.txt
#
# text file with a list of wordpress.org plugin slugs. one per line.
#
function wp_plugins
{
	if [ -z $1 ]; then
		echo  "Whoops! you forgot to specify a file"
		return 1
	fi

	for  plugin_id in `cat $1`
	do
		wp plugin install $plugin_id
	done

	wp plugin status
}



#
# matrix - Display the Matrix code in your terminal
#
function matrix()
{
	echo -e "\e[1;40m" ;
	clear ;
	characters=$( jot -c 94 33 | tr -d '\n' ) ;
	while :;
	do echo $LINES $COLUMNS $(( $RANDOM % $COLUMNS)) $(( $RANDOM % 72 )) $characters ;
	sleep 0.05; done|awk '{ letters=$5; c=$4; letter=substr(letters,c,1);a[$3]=0;for (x in a) {o=a[x];a[x]=a[x]+1; printf "\033[%s;%sH\033[2;32m%s",o,x,letter; printf "\033[%s;%sH\033[1;37m%s\033[0;0H",a[x],x,letter;if (a[x] >= $1) { a[x]=0; } }}'
}



#
# strlen - get the length of a string
#
# @param string
#
function strlen
{
	echo ${#1}
}



