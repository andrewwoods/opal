"
" Opal Project
" VIM Editor Settings for Javascript
" by Andrew Woods
" Updated 2015 Jun 17 Wed
"
"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
"
" Don't edit this file. Instead create .vimrc_js in your home directory
" and read this file with the following line
"
" :source ~/opal/vimrc_js
"
" If you want to change the value, copy the line from this file and change the
" value in your .vimrc_js This will allow you keep your changes after
" updates.
"
"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


source ~/opal/vimrc

"
" --------[ General VIM ]--------
"

" Pattern searches should ignore case
set ignorecase

" Turn on line numbering
set number

" helps you find matching { and ( when you type ) } - if on screen
set showmatch

" Flash when errors occur
set visualbell

" Show the line and column number of the cursor position
set ruler

" Put a message in the status line for insert, replace, and visual modes
set showmode

" Highlight the syntax of a language
syntax on

"
" Highlight columns 82 with DarkGreen background
"
highlight ColorColumn ctermfg=White ctermbg=DarkGreen
call matchadd('ColorColumn', '\%82v.')

"
" Highlight columns 120 and above like an error. It's bad form to have lines longer the 120 characters
"
match ErrorMsg '\%120v.\+'

set autoindent
set smartindent


" Folding Settings
set foldmarker={,} " This makes it work like other programming editors
set foldmethod=marker
set foldlevelstart=1


set listchars=""
set listchars+=tab:Â§Â¬
set listchars+=eol:Â¶
set listchars+=trail:Â¤
set listchars+=extends:Â»
set listchars+=precedes:Â«



"
" --------[ Javascript Settings ]--------
"

" Handles the settings for indentation
set tabstop=4
set softtabstop=4
set shiftwidth=4

" Determine line endings
set fileformat=unix
set fileformats=unix,dos

" When inserting a tab, dont expand it to spaces
set noexpandtab


"
" --[ Abbreviations ]--
"

:ab c_array var value = [];
:ab c_dowhile do {// do stuff} while ( condtion );
:ab c_for for ( var i = 0, max = data.length; i <= max; i++ ) {// do stuff}
:ab c_forin for ( var i in obj ) {// do stuff}
:ab c_function function foo( p1, p2 ) {// do something;}
:ab c_function_alt foo = function ( p1, $p2 ) {// do something;}
:ab c_if if ( condtion ) {// do stuff}
:ab c_iife ( function(){// do stuff}() );
:ab c_ifelse if ( condtion ) {// do stuff} else {//something else}
:ab c_ifelsif if ( condtion ) {// do stuff} else if ( other_condtion ) {// do other stuff} else {//something else}
:ab c_ifelseif if ( condtion ) {// do stuff} else if ( other_condtion ) {// do other stuff} else {//something else}
:ab c_loop if ( have_posts() ) :while ( have_posts() ) :the_post();// Do stuffendwhile; // end of the loop.else://Sorry! No Resultsendif; // end of the if
:ab c_method MYAPP.foo = function( p1, p2 ) {// do something;}
":ab c_namespace var MYAPP = MYAPP or {}; " the word 'or' should be replaced by ||, but vim chokes on it
:ab c_object value = {};
:ab c_prototype Class.prototype.name = function() {// do stuff};
:ab c_switch switch ( $i ) {case 0:	// do stuffbreak;	hicase 1:	// do other stuffbreak;	hidefault:	echo "i equals 2";break;}
:ab c_throw throw new Error('This is the message' );
:ab c_trycatch try {// do stuff} catch(e) {//something else}
:ab c_while while ( condtion ) {// do stuff}
:ab c_value value = '';

:ab grepfunc !grep -n function %


:source ~/opal/vimrc_html



