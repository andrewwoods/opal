"
" Opal Project
" VIM Editor Settings for PHP
" by Andrew Woods
" Updated 2015 Nov 24 Tue
"
"-------------------------------------------------------------------------------
"
" Don't edit this file. Instead create .vimrc_php in your home directory
" and read this file with the following line
"
" :source ~/opal/vimrc_php
"
" If you want to change the value, copy the line from this file and change the
" value in your .vimrc_php This will allow you keep your changes after
" updates.
"
"===============================================================================


"
" --------[ Load Other Files ]--------------------------------------------------
"
source ~/opal/vimrc
source ~/opal/vimrc_html
source ~/opal/vimrc_css

"
" --------[ General Vim Settings ]----------------------------------------------
"

" Pattern searches should ignore case
set ignorecase

" Turn on line numbering
set number

" helps you find matching { and ( when you type ) } - if on screen
set showmatch

" Flash when errors occur
set visualbell

" Show the line and column number of the cursor position
set ruler

" Put a message in the status line for insert, replace, and visual modes
set showmode

" Highlight the syntax of a language
syntax on

" Indentation Behavior 
set autoindent
set smartindent


" Folding Settings
set foldmarker={,} " This makes it work like other programming editors
set foldmethod=marker
set foldlevelstart=1


set listchars=""
set listchars+=tab:Â§Â¬
set listchars+=eol:Â¶
set listchars+=trail:Â¤
set listchars+=extends:Â»
set listchars+=precedes:Â«




"
" --------[ Column Highlighting ]-----------------------------------------------
"

"
" Ideally, lines will be 80 characters or less
"
highlight IdealColumn ctermfg=Black ctermbg=Green
call matchadd('IdealColumn', '\%80v.')

"
" 120 characters is the soft limit. It's up to you to keep your lines under 120
"
highlight SoftColumn ctermfg=Black ctermbg=Yellow
call matchadd('SoftColumn', '\%120v.\+')



"
" --------[ PHP Settings ]----------------------------------------------
"

" Handles the settings for indentation
set tabstop=4
set softtabstop=4
set shiftwidth=4

" Determine line endings
set fileformat=unix
set fileformats=unix

" When inserting a tab, expand it to spaces
set expandtab




"
" --------[ Abbreviations ]-----------------------------------------------------
"
:ab c_array var value = [];
:ab c_class class Foo{// Your code here}
:ab c_class_extends class Foo extends Parent implements InterfaceName{// Your code here}
:ab c_dowhile do {// do stuff} while (condtion);
:ab c_for for ($i = 0; $i <= $max; $i++) {// do stuff}
:ab c_foreach foreach ($array_name as $key => $val) {// do stuff}
:ab c_function function foo($p1, $p2){// do something;}
:ab c_if if (condtion) {// do stuff}
:ab c_ifelse if (condtion) {// do stuff} else {//something else}
:ab c_ifelsif if (condtion) {// do stuff} elseif (other_condtion) {// do other stuff} else {//something else}
:ab c_ifelseif if (condtion) {// do stuff} elseif (other_condtion) {// do other stuff} else {//something else}
:ab c_method abstract final public/protected/private static function foo($p1, $p2){// do something;}
:ab c_namespace  namespace Foo\Bar\subnamespace;
:ab c_switch switch ($i) {case 0:	// do stuffbreak;	hicase 1:	// do other stuffbreak;	hidefault:	echo "i equals 2";break;}
:ab c_throw throw new Exception('This is the message');
:ab c_trycatch try {// do stuff} catch(e) {//something else}
:ab c_use use foo;
:ab c_use_as use Foo as Name;
:ab c_while while (condtion) {// do stuff}
:ab c_value abstract final public/protected/private static $value = '';
:ab c_var abstract final public/protected/private static $value = '';

:ab grepfunc !grep -n function %



"
" --------[ Functions ]---------------------------------------------------------
"



"
" Turn on highlighting of leading and trailing spaces
"
function! SpaceHi()
	:call LeadingTabsHi()
	:call TrailingSpacesHi()

	let b:spacehi = 1
endfunction

"
" Turn off highlighting of leading and trailing spaces
"
function! NoSpaceHi()
	syntax clear  spacehiLeadingTabs
	syntax clear  spacehiTrailingSpaces

	let b:spacehi = 0
endfunction

" Toggle highlighting of spaces and tabs
"
"   This should be defined in different vimrc files
"   to custom which whitespace characters should be highlighted
"
function! ToggleSpaceHi()
	if exists("b:spacehi") && b:spacehi
		:call NoSpaceHi()
		echo "space highlighting: off"
	else
		:call SpaceHi()
		echo "space highlighting: on"
	endif
endfunction


"-------------------------------------------------------------------------------
" Section: Commands
"
"  These commands and mapping will be reused no matter which code styling you use
"
com! ToggleSpaceHi :call ToggleSpaceHi()

autocmd FileType php autocmd BufWritePre <buffer> :call StripTrailingWhitespace()



"-------------------------------------------------------------------------------
" Section: Key Mappings
"
"
" Only insert a map to ToggleSpaceHi if they don't already have a map to
" the function and don't have something bound to F3
"
if !hasmapto('ToggleSpaceHi') && maparg("<F3>") == ""
	map <silent> <unique> <F3> :ToggleSpaceHi<CR>
endif




" @TODO add a function that removes trailing whitespace upon saving of buffer


