#!/bin/bash

#
# Fit - an fitness / food journal tool
#
# Author: Andrew Woods
#
#

export PAD="    ";


################################################################################
#
#     Utility Functions
#
################################################################################

#
# echo text with padding
#
# @param String @param $content
#
function e_
{
	echo "${PAD}$1"
}

#
# echo a blank line
#
function n_
{
	echo ""
}

#
# echo text with padding
#
# @param String $content
#
function p_
{
	prompt "${PAD}$1"
}


#
# Displays content and adds a blank line
#
# @param String $content
#
function meta_info
{
    p_ "$1"
	spacer 1
}

#
# Display a todo message
#
function show_todo
{
    l_
	spacer 1
	p_ "TODO: This still needs to be worked on "
	spacer 1
    l_
}

#
# Display Help menu
#
function show_help
{
	n_
	e_ " h | help - Display this help message"
	e_ " a | add  - Add an entry into the journal"
	e_ " l | list -  list all entries from the journal"
	e_ " q | quit - Exit present"
	n_
}

#
# add_item - Interactively allow user to add content
#
function add_item
{
	p_ 'Types: '
	p_ 'W = Weight'
	p_ 'S = Sleep'
	p_ 'E = Eat'
	p_ 'D = Drink'

	read -p "Enter a type of item> " item_type

	ts=$(date +"%Y-%m-%d %a %H:%M:%S")
	filename=$(get_filename)
	if [[ $item_type = "W" || $item_type = "w" ]]
	then
		read -p "How Much you do weight (lbs)> " how_much
		echo "${ts} WEIGHT ${how_much} lbs" | tee -a $filename
	elif [[ $item_type = "S" || $item_type = "s" ]]
	then
		read -p "How much sleep did you get > " how_much
		echo "${ts} SLEEP ${how_much} " | tee -a $filename
	elif [[ $item_type = "E" || $item_type = "e" ]]
	then
		read -p "What did you eat? > " ate_what
		echo "${ts} EAT ${ate_what} " | tee -a $filename
	elif [[ $item_type = "D" || $item_type = "d" ]]
	then
		read -p "What did you drink? > " drank_what
		echo "${ts} DRINK ${drank_what} " | tee -a $filename
	fi
}

#
# get_filename - retrieve path to file. Uses datadir()
#
function get_filename
{
	echo "$(datadir)/fit.log"
}

#
# Add the datair function if it doesn't exist.
#
if [[ -z "$(which datadir)" ]]
then
	#
	# Detect if dropbox is available. if not, use the home directory
	#
	function datadir()
	{
		DROPBOX="$HOME/Dropbox"

		if [[ -d "$1" && -w "$1" ]]
		then
			echo $1
		elif [[ -d "$DROPBOX" && -w "$DROPBOX" ]]
		then
			echo $DROPBOX
		else
			echo $HOME
		fi
	}
fi

#
# list_items - prompt the user for a serach term. display the results
#
function list_items
{
	filename=$(get_filename)

	read -p "Search for? > " search
	echo "search=${search}"
	if [[ $search != '' ]]
	then
		echo 'list_items: in the IF'
		grep -i -n $search $filename
	else
		echo 'list_items: in the ELSE'
		nl $filename
	fi
}

#
# spacer - Create a number of blank lines.
#
# @param int Optional $max the number of blank lines. Default=1
#
function spacer
{
	max=1
	if [[ $1 != "" ]]
	then
		max=$1
	fi

	for (( i=1; i <= $max; i++ ))
	do
		echo ""
	done
}

#
# Display a line of dashes.
#
# @param char $character Optional. Use a different character. default is hyphen.
# @param int $length Optional. How long should the line be. default=60
#
function l_
{
	max_length=60
	char="-"
	line=""

	if [[ $1 != "" ]]
	then
		char=$1
	fi

	if [[ $2 != "" ]]
	then
		max_length=$2
	fi

	for (( i=${#PAD}; i <= $max_length; i++ ))
	do
		line+=$char
	done
	e_ $line
}


################################################################################
#
#    Main Program
#
################################################################################

source $HOME/opal/bashrc

op=''

clear
show_help

while true
do
	read -p "> " op

	if [[ $op == 'q' ||  $op == 'quit' ]]
	then
		break
	else

		if [[ $op == 'a'  ||  $op == 'add'  ]]
		then
			add_item
		elif [[ $op == 'h' ||  $op == 'help'  ]]
		then
			show_help
		elif [[ $op == 'l' ||  $op == 'list'  ]]
		then
			list_items
		elif [[ $op == 'u' ||  $op == 'update'  ]]
		then
			show_todo
		elif [[ $op == 'd' ||  $op == 'delete'  ]]
		then
			show_todo
		fi

		continue

	fi

done


