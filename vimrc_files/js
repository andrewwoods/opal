"
" Opal Project
" VIM Editor Settings for Javascript
" by Andrew Woods
" Updated 2017 Nov 21 Tue
"
"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
"
" Don't edit this file. Instead create .vimrc_js in your home directory
" and read this file with the following line
"
" :source ~/opal/vimrc_files/js
"
" If you want to change the value, copy the line from this file and change the
" value in your .vimrc_js This will allow you keep your changes after
" updates.
"
"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


source ~/opal/vimrc_files/_formatting.vim
source ~/opal/vimrc_files/_ui-settings.vim
source ~/opal/vimrc_files/vimrc
source ~/opal/vimrc_files/html

"
" --------[ General VIM ]--------
"

" Highlight the syntax of a language
syntax on

"
" --------[ Javascript Settings ]--------
"

" Handles the settings for indentation
set tabstop=4
set softtabstop=4
set shiftwidth=4

" When inserting a tab, dont expand it to spaces
set noexpandtab

"
" --[ Abbreviations ]--
"

:ab c_array var value = [];
:ab c_dowhile do {// do stuff} while ( condtion );
:ab c_for for ( var i = 0, max = data.length; i <= max; i++ ) {// do stuff}
:ab c_forin for ( var i in obj ) {// do stuff}
:ab c_function function foo( p1, p2 ) {// do something;}
:ab c_function_alt foo = function ( p1, $p2 ) {// do something;}
:ab c_if if ( condtion ) {// do stuff}
:ab c_iife ( function(){// do stuff}() );
:ab c_ifelse if ( condtion ) {// do stuff} else {//something else}
:ab c_ifelsif if ( condtion ) {// do stuff} else if ( other_condtion ) {// do other stuff} else {//something else}
:ab c_ifelseif if ( condtion ) {// do stuff} else if ( other_condtion ) {// do other stuff} else {//something else}
:ab c_loop if ( have_posts() ) :while ( have_posts() ) :the_post();// Do stuffendwhile; // end of the loop.else://Sorry! No Resultsendif; // end of the if
:ab c_method MYAPP.foo = function( p1, p2 ) {// do something;}
":ab c_namespace var MYAPP = MYAPP or {}; " the word 'or' should be replaced by ||, but vim chokes on it
:ab c_object value = {};
:ab c_prototype Class.prototype.name = function() {// do stuff};
:ab c_switch switch ( $i ) {case 0:	// do stuffbreak;	hicase 1:	// do other stuffbreak;	hidefault:	echo "i equals 2";break;}
:ab c_throw throw new Error('This is the message' );
:ab c_trycatch try {// do stuff} catch(e) {//something else}
:ab c_while while ( condtion ) {// do stuff}
:ab c_value value = '';

:ab grepfunc !grep -n function %

"
" Turn on highlighting of leading and trailing spaces
"
function! SpaceHi()
	:call LeadingSpacesHi()
	:call TrailingSpaceHi()

	let b:spacehi = 1
endfunction

"
" Turn off highlighting of leading and trailing spaces
"
function! NoSpaceHi()
	syntax clear  spacehiLeadingSpace
	syntax clear  spacehiTrailingSpace

	let b:spacehi = 0
endfunction

" Toggle highlighting of spaces and tabs
"
"   This should be defined in different vimrc files
"   to custom which whitespace characters should be highlighted
"
function! ToggleSpaceHi()
	if exists("b:spacehi") && b:spacehi
		:call NoSpaceHi()
		echo "space highlighting: off"
	else
		:call SpaceHi()
		echo "space highlighting: on"
	endif
endfunction


"-------------------------------------------------------------------------------
" Section: Commands
"
"  These commands and mapping will be reused no matter which code styling you use
"
com! ToggleSpaceHi :call ToggleSpaceHi()

"-------------------------------------------------------------------------------
" Section: Key Mappings
"
"
" Only insert a map to ToggleSpaceHi if they don't already have a map to
" the function and don't have something bound to F3
"
if !hasmapto('ToggleSpaceHi') && maparg("<F3>") == ""
	map <silent> <unique> <F3> :ToggleSpaceHi<CR>
endif



