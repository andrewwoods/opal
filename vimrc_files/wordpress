"
" Opal Project
" VIM Editor Settings for Wordpress
" by Andrew Woods
" Updated 2017 Nov 21 Tue
"
"-------------------------------------------------------------------------------
"
" Don't edit this file. Instead create .vimrc_wordpress in your home directory
" and read this file with the following line
"
" :source ~/opal/vimrc_files/wordpress
"
" If you want to change the value, copy the line from this file and change the
" value in your .vimrc_wordpress. This will allow you keep your changes after
" updates.
"
"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

source ~/opal/vim_functions/spacehi.vim
source ~/opal/vimrc_files/_formatting.vim
source ~/opal/vimrc_files/_ui-settings.vim
source ~/opal/vimrc_files/vimrc
source ~/opal/vimrc_files/html
source ~/opal/vimrc_files/css


"
" --------[ General Vim Settings ]----------------------------------------------
"

syntax on

colorscheme hotness


"
" --------[ Wordpress Settings ]--------
"

" Handles the settings for indentation
set tabstop=4
set softtabstop=4
set shiftwidth=4


" When inserting a tab, dont expand it to spaces
set noexpandtab


"
" --[ Abbreviations ]--
"

"
" Never write short tags.
" This will make you do the right thing, in case you forget :)
:ab <?= <?php echo ;?>hhha
:ab x_phpe <?php echo ; ?>hhhhha
:ab x_phpoc <?php  ?>hhhha


" Create Function level PHPDoc
":iab x_function
"\<CR>/**
"\<CR><Left> * Short Description
"\<CR><Left> *
"\<CR><Left> * Long Description
"\<CR><Left> *
"\<CR><Left> * @since version
"\<CR><Left> *
"\<CR><Left> * @param  type $name  it does something
"\<CR><Left> * @return type        it does something
"\<CR><Left> */

" Create Class level PHPDoc
:iab x_class /**
\<CR> * A brief one line description of your class
\<CR><Left> *
\<CR><Left> * Describe what your class does at a high level, and how it can help the
\<CR><Left> * user. The functions of your class should have their own phpdoc comments.
\<CR><Left> *
\<CR><Left> *
\<CR><Left> * @package  Example
\<CR><Left> * @author   FIRST_NAME LAST_NAME <author@foobar.com>
\<CR><Left> * @author   SECOND AUTHOR <second_author@foobar.com>
\<CR><Left> * @access   public
\<CR><Left> */


" Create Plugin level PHPDoc
:ab x_plugin /*
\<CR>Plugin name: NAME OF PLUGIN
\<CR>Plugin URI: http://example.com/wp-plugins/plugin-name
\<CR>Version: 1.0
\<CR>Author: FIRSTNAME LASTNAME
\<CR>Author URI: http://authorwebsite.com
\<CR>License: GPL2
\<CR>*/


:ab c_class class NAME extends PARENT{// do something;}
:ab c_define define('VALUE', '');
:ab c_dowhile do {// do stuff} while ( condtion );
:ab c_for for ( $i = 0; $i <= $max; $i++ ) {// do stuff}
:ab c_foreach foreach ( $array_name AS $key => $value ) {// do stuff}
:ab c_function function foo($p1, $p2 = '') {// do something;}
:ab c_if if ( condtion ) {// do stuff}
:ab c_ifelse if ( condtion ) {// do stuff} else {//something else}
:ab c_ifelsif if ( condtion ) {// do stuff} else if ( other_condtion ) {// do other stuff} else {//something else}
:ab c_ifelseif if ( condtion ) {// do stuff} else if ( other_condtion ) {// do other stuff} else {//something else}
:ab c_loop if ( have_posts() ) :while ( have_posts() ) :the_post();// Do stuffendwhile; // end of the loop.else://Sorry! No Resultsendif; // end of the if
:ab c_member public $value = '';
:ab c_method public,protected,private function foo($p1, $p2 = '') {// do something;}
:ab c_switch switch ( $i ) {case 0:	// do stuffbreak;	hicase 1:	// do other stuffbreak;	hidefault:	echo "i equals 2";break;}
:ab c_while while ( condtion ) {// do stuff}
:ab c_value $value = '';

:ab grepfunc !grep -n function %


"
" Turn on highlighting of leading and trailing spaces
"
function! TurnOnHighlights()
	:call HighlightLeadingSpaces()
	:call HighlightTrailingSpaces()

    :call EnableSpaceHighlighting()
endfunction

"
" Turn off highlighting of leading and trailing spaces
"
function! TurnOffHighlights()
	:call DisableHighlightLeadingSpaces()
	:call DisableHighlightTrailingSpaces()

    :call DisableSpaceHighlighting()
endfunction



"-------------------------------------------------------------------------------
" Section: Commands
"
"  These commands and mapping will be reused no matter which code styling you use
"
com! ToggleSpaceHighlights :call ToggleSpaceHighlights()

"-------------------------------------------------------------------------------
" Section: Key Mappings
"
"
" Only insert a map to ToggleSpaceHi if they don't already have a map to
" the function and don't have something bound to F3
"

if !hasmapto('ToggleSpaceHighlights') && maparg("<F3>") == ""
    map <silent> <unique> <F3> :call ToggleSpaceHighlights()<CR>
endif


"
" Only insert a map to StripTrailingWhitespace if they don't already have a map
" to the function and don't have something bound to F9
"

if !hasmapto('StripTrailingWhitespace') && maparg("<F9>") == ""
    map <silent> <unique> <F9> :call StripTrailingWhitespace()<CR>
endif

