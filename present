#!/bin/bash

#
# Present - an interactive command line presentation tool
#
# Author: Andrew Woods
#
#

source ~/opal/util.bash

################################################################################
#
#     Utility Functions
#
################################################################################



#
# Display info about the slide, usually the slide number.
#
function meta_info
{
	_s "$1"
	spacer 1
}

#
# Display Help
#
function present_help
{
	_n
	_s " h | help - Display this help message"
	_s " n | next - Display the next slide"
	_s " p | previous - Display the previous slide"
	_s " m | menu - Display menu of slides. Uses function names"
	_s " q | quit - Exit present"
	_n
}



################################################################################
#
#    Main Program
#
################################################################################

if [ -d $1 ]; then
	PROJ_DIR=$1
else
	PROJ_DIR="."
fi

source $PROJ_DIR/present-lib.bash



clear

op=''
slide=0
slides_length=${#Slides[@]}
slides_last=$((slides_length-1))
slides_max=$((slides_last-1))

# Display the opening slide
${Slides[0]}

while true
do
	read -p "> " op

	if [[ $op == 'q' ||  $op == 'quit' ]]
	then
		break
	else

		if [[ $op == 'n'  ||  $op == 'next'  ]]
		then
			slide=$((slide+1))
		elif [[ $op == 'p' ||  $op == 'previous'  ]]
		then
			slide=$((slide-1))
		elif [[ $op == 'h' ||  $op == 'help'  ]]
		then
			present_help
			continue
		elif [[ $op == 'm' ||  $op == 'menu'  ]]
		then
			_e "    Menu"
			_e "--------------------------"
			for i in $(seq 1 $slides_last)
			do
				_e "$i - ${Slides[$i]}"
			done
			_n
			continue
		else
			slide=$op
		fi

		clear

		if [ $slide -le $slides_max ]
		then
			meta_info "[$slide/$slides_max] "
			${Slides[$slide]}
		else
			break
		fi
	fi

done

meta_info "Final Slide"
${Slides[$slides_last]}
echo ""


